
RUN_CONFIG:
  pipeline_name: __default__
  only_missing: False
  runner: SequentialRunner # None
  tags: # None
  node_names: # None
  from_nodes: # None
  to_nodes: # None
  from_inputs: # None
  load_versions: # None

MLFLOW_LOGGING_CONFIG:
  offset_hours: 0
  logging_artifacts:  # None
  
PIPELINES:
  __default__:
    =: pipelinex.FlexiblePipeline
    parameters_in_inputs: False
    module:  # None
    decorator: pipelinex.log_time
    nodes:

      - inputs: img_00
        func:
          - {=: pipelinex.CvResize, dsize: "(512, 512)"}
        outputs: img_01

      - inputs: img_01
        func:
#          - {=: pipelinex.CvBGR2HSV, _: }
          - {=: pipelinex.CvBGR2Gray, _: }
          - {=: pipelinex.CvEqualizeHist, _: }
#          - {=: pipelinex.CvBlur, ksize: "(5, 5)"}
#          - {=: pipelinex.CvMedianBlur, ksize: 5}
#          - {=: pipelinex.CvBilateralFilter, d: 9, sigmaColor: 200, sigmaSpace: 200}
          - {=: pipelinex.CvGaussianBlur, ksize: "(5, 5)", sigmaX: 3}
        outputs: img_02

      - inputs: img_02
        func:
#          - {=: pipelinex.CvDiagonalEdgeFilter2d, ddepth: -1, kernel_type: 1}
#          - {=: pipelinex.CvFitToUint8, _: }
          - {=: pipelinex.CvCanny, threshold1: 10, threshold2: 10, apertureSize: 5, L2gradient: True}
        outputs: img_03

      - inputs: img_03
        decorator: {=: pipelinex.dict_io}
        func: {=: empty_area.detect_lines_and_estimate_empty_ratio}
        outputs: [empty_ratios_dict, img_04_raw, img_05]

      - inputs: empty_ratios_dict
        func: {=: pipelinex.NestedDictToDf, index_name: image}
        outputs: empty_ratios_df

      - inputs: img_04_raw
        decorator: {=: pipelinex.dict_io}
        func: {=: empty_area.visualize_lines_img}
        outputs: img_04